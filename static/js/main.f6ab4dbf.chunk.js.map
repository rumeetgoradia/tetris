{"version":3,"sources":["img/bg.png","gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/usePlayer.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","usePlayer","useState","collided","setPlayer","rotate","matrix","direction","rotatedTetro","map","_","index","col","row","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clone","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","cell","forEach","value","reduce","acc","findIndex","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","console","log","movePlayer","dir","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","className","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6ab4dbf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\n// 0 means empty cell, 'clear' means no tetrominos has collided in this cell\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; ++y) {\r\n    for (let x = 0; x < player.tetromino[0].length; ++x) {\r\n      // First, check that we are on tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // Then, check that movement is within game area's height\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // Then, check that movement is within game area's width\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // Then, check that cell we're moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","import styled from 'styled-components';\r\nimport bgImg from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: #FC466B;  /* fallback for old browsers */\r\n    background: -webkit-radial-gradient(circle farthest-corner at 10% 20%, #3F5EFB, #FC466B);  /* Chrome 10-25, Safari 5.1-6 */\r\n    background: radial-gradient(circle farthest-corner at 10% 20%, #3F5EFB, #FC466B); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */    \r\n    overflow: hidden;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    // padding: .5rem;\r\n    margin: 0 auto;\r\n    max-width: 100vw;\r\n    justify-content: center;\r\n    height: 100%;\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 0 0 20px;\r\n        // height: 90%;\r\n\r\n        @media only screen and (max-width: 426px) {\r\n            max-width: 150px;\r\n        }\r\n    }\r\n`;","export const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0, 0, 0' },\r\n    I: {\r\n        shape: [\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0]\r\n        ],\r\n        color: '255,72,196'\r\n    },\r\n    J: {\r\n        shape: [\r\n            [0, 'J', 0],\r\n            [0, 'J', 0],\r\n            ['J', 'J', 0]\r\n        ],\r\n        color: '43,209,252'\r\n    },\r\n    L: {\r\n        shape: [\r\n            [0, 'L', 0],\r\n            [0, 'L', 0],\r\n            [0, 'L', 'L']\r\n        ],\r\n        color: '243,234,95'\r\n    },\r\n    O: {\r\n        shape: [\r\n            ['O', 'O'],\r\n            ['O', 'O']\r\n        ],\r\n        color: '192,77,249'\r\n    },\r\n    S: {\r\n        shape: [\r\n            [0, 'S', 'S'],\r\n            ['S', 'S', 0],\r\n            [0, 0, 0]\r\n        ],\r\n        color: '255, 7, 58'\r\n    },\r\n    T: {\r\n        shape: [\r\n            ['T', 'T', 'T'],\r\n            [0, 'T', 0],\r\n            [0, 0, 0],\r\n        ],\r\n        color: '255, 103, 0'\r\n    },\r\n    Z: {\r\n        shape: [\r\n            ['Z', 'Z', 0],\r\n            [0, 'Z', 'Z'],\r\n            [0, 0, 0]\r\n        ],\r\n        color: '57,255,20'\r\n    }\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino =\r\n        tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n}","import { useState, useCallback } from \"react\";\r\n\r\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\r\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false\r\n  });\r\n\r\n  const rotate = (matrix, direction) => {\r\n    // Transpose matrix\r\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]));\r\n    // Reverse rows to get rotated matrix\r\n    if (direction > 0) return rotatedTetro.map(row => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  }\r\n\r\n  const playerRotate = (stage, direction) => {\r\n    const clone = JSON.parse(JSON.stringify(player));\r\n    clone.tetromino = rotate(clone.tetromino, direction);\r\n    //Check if rotate results in collision\r\n    const pos = clone.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clone, stage, { x: 0, y: 0 })) {\r\n      clone.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clone.tetromino[0].length) {\r\n        rotate(clone.tetromino, -direction);\r\n        clone.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clone);\r\n  }\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    })\r\n  }, [])\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { createStage } from \"../gameHelpers\";\r\n// import { player, resetPlayer } from \"./usePlayer\"\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n    const sweepRows = newStage => (\r\n      newStage.reduce((acc, row) => {\r\n        // Check if you can find a 0 in the row; if not, it's full\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => ++prev);\r\n          acc.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return acc;\r\n        }\r\n        acc.push(row);\r\n        return acc;\r\n      }, [])\r\n    )\r\n\r\n    const updateStage = prevStage => {\r\n      //First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n      );\r\n\r\n      //Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Check if collision\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    setStage(prev => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(46.875vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 46.875vw;\r\n    background: rgba(27, 27, 27, 0.4);\r\n\r\n    @media only screen and (min-width: 768px) {\r\n        grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(38.5vw / ${props => props.width})\r\n        );\r\n        max-width: 38.5vw;\r\n    }\r\n\r\n    @media only screen and (min-width: 1024px) {\r\n        grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(30.75vw / ${props => props.width})\r\n        );\r\n        max-width: 30.75vw;\r\n    }\r\n\r\n    @media only screen and (min-width: 1440px) {\r\n        grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(26vw / ${props => props.width})\r\n        );\r\n        max-width: 26vw;\r\n    }\r\n`;","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, ${props => props.type === 0 ? '0.25' : '0.85'});\r\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n`;","import React from \"react\";\r\nimport { StyledCell } from './styles/StyledCell'\r\nimport { TETROMINOS } from '../tetrominos'\r\n\r\nconst Cell = ({ type }) => <StyledCell type={type} color={TETROMINOS[type].color} />\r\n\r\nexport default React.memo(Cell);\r\n","import React from \"react\";\r\nimport { StyledStage } from './styles/StyledStage'\r\n\r\nimport Cell from \"./Cell\";\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: ${props => props.gameOver ? 'center' : 'flex-end'};\r\n    margin: 0 0 20px 0;\r\n    padding: 25px;\r\n    border: 4px solid;\r\n    border-color: ${props => props.gameOver ? 'red' : '#333'};\r\n    // min-height: 26px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => props.gameOver ? 'red' : '#999'};\r\n    background: rgba(27, 27, 27, 0.4);\r\n    // font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: .9rem;\r\n    text-align: right;\r\n    font-weight: 100;\r\n\r\n    @media only screen and (max-width: 426px) {\r\n        padding: 18px;\r\n        margin: 0 0 10px 0;\r\n        font-size: .8rem;\r\n    }\r\n`;","import React from \"react\";\r\nimport { StyledDisplay } from './styles/StyledDisplay'\r\n\r\nconst Display = ({ gameOver, text }) => <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>;\r\n\r\nexport default Display;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  // margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: 1px solid #333;\r\n  color: #ccc;\r\n  background: #333;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n  transition: all .4s ease-in-out;\r\n  font-family: 'Heebo', sans-serif;\r\n  font-weight: 100;\r\n\r\n  :hover {\r\n    box-shadow: 0 5px 15px 0px rgba(27, 27, 27, 0.65);\r\n    color: #333;\r\n    background: #ccc;\r\n    // font-weight: 400;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledStartButton } from \"./styles/StyledStartButton\";\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { createStage, checkCollision } from \"../gameHelpers\";\r\n\r\n//Styled Components\r\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\";\r\n\r\n//Custom Hooks\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\nimport { useStage } from \"../hooks/useStage\";\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n//Components\r\nimport Stage from \"./Stage\";\r\nimport Display from \"./Display\";\r\nimport StartButton from \"./StartButton\";\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n  console.log(\"re-render\");\r\n  console.log(dropTime);\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    console.log(\"test\")\r\n    //Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n  };\r\n\r\n  const drop = () => {\r\n    // Increment level after every 10 rows cleared\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n      // Increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n\r\n    }\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      //Game Over\r\n      if (player.pos.y < 1) {\r\n        console.log(\"GAME OVER\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true })\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        console.log('interval on');\r\n        setDropTime(1000 / (level + 1) + 200);\r\n      }\r\n    }\r\n  }\r\n\r\n  const dropPlayer = () => {\r\n    console.log('interval off');\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38 || keyCode === 88) {\r\n        playerRotate(stage, 1);\r\n      } else if (keyCode === 90) {\r\n        playerRotate(stage, -1);\r\n      }\r\n    }\r\n  };\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime)\r\n\r\n  return (\r\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\r\n      <StyledTetris>\r\n\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          <div className=\"heading\">\r\n            <h1>TETRIS</h1>\r\n            <h2>Rumeet Goradia</h2>\r\n          </div>\r\n          <div className=\"buttons\">\r\n            {gameOver ? (\r\n              <Display gameOver={gameOver} text=\"Game Over\" />\r\n            ) : (\r\n                <div>\r\n                  <div className=\"display\">\r\n                    <Display text={`${score}`} />\r\n                    <h3>Score</h3>\r\n                  </div>\r\n                  <div className=\"display\">\r\n                    <Display text={`${rows}`} />\r\n                    <h3>Rows</h3>\r\n                  </div>\r\n                  <div className=\"display\">\r\n                    <Display text={`${level}`} />\r\n                    <h3>Level</h3>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            <StartButton callback={startGame} />\r\n          </div>\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        // Check if there is score\r\n        if (rowsCleared > 0) {\r\n            // Original Tetris score formula\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n        // useCallback will only operate if any of below values change\r\n    }, [level, linePoints, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score])\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport Tetris from \"./components/Tetris\";\nimport \"./index.css\";\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}